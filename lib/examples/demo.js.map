{"version":3,"sources":["../../src/examples/demo.js"],"names":[],"mappings":";;AAGA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAPA;;AAEA;AAOA,QAAQ,oBAAR,EAA8B,OAA9B;;AAEA;AACA,IAAM,aAAc,QAAQ,IAAR,CAAa,CAAb,MAAoB,MAAxC;;AAEA;AACA;AACA;AACA,sBAAO,gBAAP,CAAwB,mCAAU,MAAV,CAAiB;AACrC,kBAAiB,qBADoB;AAErC,oBAAiB;AAFoB,CAAjB,CAAxB;;AAKA;AACA;AACA;AACA;AACA,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C;AACxC,QAAI,QAAQ,WAAE,WAAF,uBAAkC,EAAlC,UAA2C,IAA3C,CAAZ;AACA,eAAW,YAAM;AACb,YAAI,IAAJ,EAAU;AACN,kBAAM,IAAN,GAAa,QAAb,CAAsB,sBAAtB,EAA8C;AAC1C,uBAAQ,IAAI,KAAJ,GAAY,KAAZ,CAAkB,KAAlB,CAAwB,IAAxB;AADkC,aAA9C;AAGA,kBAAM,MAAN,eAAyB,EAAzB;AACH,SALD,MAKO;AACH,kBAAM,OAAN,CAAc,EAAd;AACH;AACJ,KATD,EASG,EATH;AAUA,WAAO,MAAM,OAAb;AACH;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,OAAO,sBAAO,SAAP,CAAiB,OAAjB,CAAX;;AAEA,WAAE,SAAF,CAAY,IAAZ,EAAkB,CACd,mBAAmB,EAAnB,EAAuB,IAAvB,CADc,EAEd,mBAAmB,GAAnB,EAAwB,IAAxB,CAFc,EAGd,mBAAmB,GAAnB,EAAwB,IAAxB,CAHc,EAId,mBAAmB,GAAnB,EAAwB,IAAxB,CAJc,EAKd,mBAAmB,GAAnB,EAAwB,IAAxB,CALc,CAAlB,EAOK,YAPL,CAOkB,UAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,EAA4B;AACtC,YAAQ,GAAR,UAAmB,OAAnB,SAA8B,OAA9B;AACA,WAAO,mBAAmB,EAAnB,CAAP;AACH,CAVL,EAWK,UAXL,CAWgB,UAAC,IAAD,EAAU;AAClB,SAAK,gBAAL,CAAsB,QAAtB;AACA,WAAO,WAAE,SAAF,CAAY,IAAZ,EAAkB,CACrB,mBAAmB,CAAnB,EAAsB,IAAtB,EAA4B,UAA5B,CADqB,EAErB,mBAAmB,EAAnB,EAAuB,IAAvB,CAFqB,EAGrB,mBAAmB,EAAnB,EAAuB,IAAvB,CAHqB,CAAlB,CAAP;AAKH,CAlBL,EAmBK,UAnBL,CAmBgB,UAAC,IAAD,EAAO,MAAP,EAAkB;AAC1B;AACA;AACA;AACA,SAAK,gBAAL,CAAsB,0BAAtB;AACA,SAAK,QAAL,CAAc,+DAAd;AACA,SAAK,QAAL,iBAA4B,MAA5B;;AAEA,YAAQ,GAAR,CAAY,aAAZ;AACA,WAAO,mBAAmB,EAAnB,CAAP;AACH,CA7BL,EA8BK,IA9BL,CA8BU,UAAC,GAAD,EAAS;AACX,YAAQ,KAAR,aAAwB,GAAxB;AACA,WAAO,mBAAmB,EAAnB,CAAP;AACH,CAjCL,EAkCK,MAlCL,CAkCY,UAAC,IAAD,EAAU;AACd;AACA;AACA,QAAM,MAAM,KAAK,GAAL,GAAW,gBAAX,EAAZ;AACA,YAAQ,GAAR,CAAY,GAAZ;AACA,sBAAQ,IAAR,YAAsB,GAAtB;AACH,CAxCL","file":"demo.js","sourcesContent":["/* eslint-disable no-console, no-shadow */\n\n//import * as Q from 'kew';\nimport Q from '../..';\n\nimport Tracer from 'opentracing';\nimport LightStep from 'lightstep-tracer/dist/lightstep-tracer-node-debug.js';\nimport shelljs from 'shelljs';\n\nrequire('source-map-support').install();\n\n// Command-line argument for demo purposes\nconst shouldFail = (process.argv[2] === 'fail');\n\n//\n// Standard OpenTracing tracer initialization\n//\nTracer.initGlobalTracer(LightStep.tracer({\n    access_token   : '{your_access_token}',\n    component_name : 'kew',\n}));\n\n//\n// Helper function - create simple timeout promises as mocks for\n// real asynchronous operations.\n//\nfunction mockAsyncOperation(ms, span, fail) {\n    let defer = Q.tracedDefer(`Async operation (${ms}ms)`, span);\n    setTimeout(() => {\n        if (fail) {\n            defer.span().logEvent('Intentional failure!', {\n                stack : new Error().stack.split(/\\n/),\n            });\n            defer.reject(`Failure! ${ms}`);\n        } else {\n            defer.resolve(ms);\n        }\n    }, ms);\n    return defer.promise;\n}\n\n//\n// Example Promise chaining\n//\n\n// NOTE: the tracedAll implementation currently requires the \"parent\" span to be\n// created before promises passed into tracedAll(). This is a temporary\n// restriction. OpenTracing supports a \"follow from\" relationship we can build\n// upon to remove the need to manually create a span.\nlet span = Tracer.startSpan('Q.all');\n\nQ.tracedAll(span, [\n    mockAsyncOperation(35, span),\n    mockAsyncOperation(150, span),\n    mockAsyncOperation(200, span),\n    mockAsyncOperation(100, span),\n    mockAsyncOperation(125, span),\n])\n    .tracedSpread((span, result1, result2) => {\n        console.log(`Ok: ${result1} ${result2}`);\n        return mockAsyncOperation(40);\n    })\n    .tracedThen((span) => {\n        span.setOperationName('nested');\n        return Q.tracedAll(span, [\n            mockAsyncOperation(8, span, shouldFail),\n            mockAsyncOperation(18, span),\n            mockAsyncOperation(12, span),\n        ]);\n    })\n    .tracedThen((span, result) => {\n        // ^^^ the \"traced\" prefixed methods operate the same as the normal\n        // kew methods, but will also pass the active span.  This can be used\n        // to customize the span, or to branch off sub-operations.\n        span.setOperationName('tracedThen (custom name)');\n        span.logEvent('tracedThen prepends the span object to the callback arguments');\n        span.logEvent(`Result was ${result}`);\n\n        console.log('second_then');\n        return mockAsyncOperation(70);\n    })\n    .fail((err) => {\n        console.error(`Error: ${err}`);\n        return mockAsyncOperation(25);\n    })\n    .finish((span) => {\n        // ^^^ an additional finish() call it needed to let close out the\n        // chained spans\n        const url = span.imp().generateTraceURL();\n        console.log(url);\n        shelljs.exec(`open \"${url}\"`);\n    });\n"]}