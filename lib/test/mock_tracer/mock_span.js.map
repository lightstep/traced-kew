{"version":3,"sources":["../../../src/test/mock_tracer/mock_span.js"],"names":[],"mappings":";;;;;;qjBAAA;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;IAIqB,Q;;;;;AAEjB;AACA;AACA;;kCAEU;AACN,mBAAO,2BAAgB,IAAhB,CAAP;AACH;;;iCAEQ;AACL,mBAAO,KAAK,OAAZ;AACH;;;yCAEgB,I,EAAM;AACnB,iBAAK,cAAL,GAAsB,IAAtB;AACH;;;gCAEO,G,EAAK;AACT,gBAAI,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,oBAAI,MAAM,KAAK,CAAL,CAAV;AACA,qBAAK,KAAL,CAAW,GAAX,IAAkB,IAAI,GAAJ,CAAlB;AACH;AACJ;;;4BAEG,M,EAAQ;AACR,iBAAK,KAAL,CAAW,IAAX,CAAgB,MAAhB;AACH;;;+BAEM,U,EAAY;AACf,iBAAK,SAAL,GAAiB,cAAc,KAAK,GAAL,EAA/B;AACH;;AAED;AACA;AACA;;;;AAEA,sBAAY,MAAZ,EAAoB;AAAA;;AAChB,aAAK,OAAL,GAAe,MAAf;AACA,aAAK,KAAL,GAAa,KAAK,aAAL,EAAb;AACA,aAAK,QAAL,GAAgB,KAAK,GAAL,EAAhB;AACA,aAAK,SAAL,GAAiB,CAAjB;AACA,aAAK,cAAL,GAAsB,EAAtB;AACA,aAAK,KAAL,GAAa,EAAb;AACA,aAAK,KAAL,GAAa,EAAb;;AAEA,aAAK,QAAL,GAAgB,IAAhB;AACA,aAAK,SAAL,GAAiB,EAAjB;AACA,aAAK,YAAL,GAAoB,IAApB;;AAEA;AACA;AACA;AACA,aAAK,WAAL,GAAmB,IAAnB;AACH;;;;+BAEM;AACH,mBAAO,KAAK,KAAZ;AACH;;;wCAEe;AACZ,gBAAM,KAAK,cAAW,KAAK,GAAL,CAAU,KAAK,MAAL,KAAgB,UAAjB,GAA+B,CAAxC,EAA2C,QAA3C,CAAoD,EAApD,CAAX,EAAqE,MAArE,CAA4E,CAAC,CAA7E,CAAX;AACA,gBAAM,KAAK,cAAW,KAAK,GAAL,CAAU,KAAK,MAAL,KAAgB,UAAjB,GAA+B,CAAxC,EAA2C,QAA3C,CAAoD,EAApD,CAAX,EAAqE,MAArE,CAA4E,CAAC,CAA7E,CAAX;AACA,wBAAU,EAAV,GAAe,EAAf;AACH;;;qCAEY,G,EAAK;AACd,oBAAQ,IAAI,IAAJ,EAAR;AACA,qBAAK,sBAAY,kBAAjB;AACI,yBAAK,QAAL,GAAgB,IAAI,iBAAJ,GAAwB,GAAxB,GAA8B,OAA9B,EAAhB;AACA,yBAAK,QAAL,CAAc,SAAd,CAAwB,IAAxB,CAA6B,IAA7B;AACA;AACJ,qBAAK,sBAAY,sBAAjB;AACI,yBAAK,YAAL,GAAoB,IAAI,iBAAJ,GAAwB,GAAxB,GAA8B,IAA9B,EAApB;AACA;AACJ;AACI,0BAAM,IAAI,KAAJ,8BAAqC,IAAI,IAAJ,EAArC,CAAN;AATJ;AAWH;;AAED;;;;;;gCAGQ;AACJ,gBAAI,MAAM;AACN,sBAAY,KAAK,KADX;AAEN,2BAAY,KAAK,cAFX;AAGN,wBAAY,CAAE,KAAK,SAAL,GAAiB,KAAK,QAAxB,EAAkC,KAAK,QAAvC,EAAiD,KAAK,SAAtD,CAHN;AAIN,yBAAY,KAAK;AAJX,aAAV;AAMA,gBAAI,qBAAE,IAAF,CAAO,KAAK,KAAZ,CAAJ,EAAwB;AACpB,oBAAI,IAAJ,GAAW,KAAK,KAAhB;AACH;AACD,mBAAO,GAAP;AACH;;;;;;kBA/FgB,Q","file":"mock_span.js","sourcesContent":["/* eslint-disable import/no-extraneous-dependencies */\n\nimport opentracing from 'opentracing';\nimport _ from 'underscore';\nimport MockContext from './mock_context';\n\n/**\n * OpenTracing Span implementation designed for use in\n * unit tests.\n */\nexport default class MockSpan {\n\n    //------------------------------------------------------------------------//\n    // OpenTracing API\n    //------------------------------------------------------------------------//\n\n    context() {\n        return new MockContext(this);\n    }\n\n    tracer() {\n        return this._tracer;\n    }\n\n    setOperationName(name) {\n        this._operationName = name;\n    }\n\n    addTags(set) {\n        let keys = Object.keys(set);\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            this._tags[key] = set[key];\n        }\n    }\n\n    log(fields) {\n        this._logs.push(fields);\n    }\n\n    finish(finishTime) {\n        this._finishMs = finishTime || Date.now();\n    }\n\n    //------------------------------------------------------------------------//\n    // MockSpan-specific\n    //------------------------------------------------------------------------//\n\n    constructor(tracer) {\n        this._tracer = tracer;\n        this._uuid = this._generateUUID();\n        this._startMs = Date.now();\n        this._finishMs = 0;\n        this._operationName = '';\n        this._tags = {};\n        this._logs = [];\n\n        this._childOf = null;\n        this._children = [];\n        this._followsFrom = null;\n\n        // Capture the stack at the time of startSpan.  Definitely too expensive\n        // to be doing in a production tracer, but convenient in the MockTracer\n        // for tracking down unfinished spans.\n        this._startStack = null;\n    }\n\n    uuid() {\n        return this._uuid;\n    }\n\n    _generateUUID() {\n        const p0 = `00000000${Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)}`.substr(-8);\n        const p1 = `00000000${Math.abs((Math.random() * 0xFFFFFFFF) | 0).toString(16)}`.substr(-8);\n        return `${p0}${p1}`;\n    }\n\n    addReference(ref) {\n        switch (ref.type()) {\n        case opentracing.REFERENCE_CHILD_OF:\n            this._childOf = ref.referencedContext().imp().spanImp();\n            this._childOf._children.push(this);\n            break;\n        case opentracing.REFERENCE_FOLLOWS_FROM:\n            this._followsFrom = ref.referencedContext().imp().span();\n            break;\n        default:\n            throw new Error(`Unknown reference type  ${ref.type()}`);\n        }\n    }\n\n    /**\n     * Returns a simplified object better for console.log()'ing.\n     */\n    debug() {\n        let obj = {\n            uuid      : this._uuid,\n            operation : this._operationName,\n            millis    : [ this._finishMs - this._startMs, this._startMs, this._finishMs ],\n            childOf   : this._childOf,\n        };\n        if (_.size(this._tags)) {\n            obj.tags = this._tags;\n        }\n        return obj;\n    }\n}\n"]}